package models

import (
	"errors"
	"fmt"

	"golang.org/x/crypto/bcrypt"

	"github.com/jinzhu/gorm"
	"github.com/tjcain/theFieldBiologist/hash"
	"github.com/tjcain/theFieldBiologist/rand"
	// db drivers
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

const hmacSecretKey = "secret-hmac-key"

var (
	// ErrNotFound is returned when a resource cannot be found
	ErrNotFound = errors.New("models: resource not found")
	// ErrInvalidID is returned when an invalid ID is provied to a method
	ErrInvalidID = errors.New("models: ID provided was invalid")
	// ErrInvalidPassword is returned when a user attemptes to log in using an
	// incorrect password and cannot be authenticated
	ErrInvalidPassword = errors.New("models: incorrect password provided")
)

var userPwPepper = "top-secret-pepper"

// User is a model of user details
type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique_index"`
	Password     string `gorm:"-"`
	PasswordHash string `gorm:"not null"`
	Remember     string `gorm:"-"`
	RememberHash string `gorm:"not null;unique_index"`
	RememberMe   bool   `gorm:"-"`
}

// UserService provides an abstraction layer, and provides methods for
// querying, creating and updating users.
type UserService struct {
	db   *gorm.DB
	hmac hash.HMAC
}

// NewUserService instantiates a UserService with a connection to postgres db
func NewUserService(connectionInfo string) (*UserService, error) {
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}
	db.LogMode(true)
	hmac := hash.NewHMAC(hmacSecretKey)
	return &UserService{
		db:   db,
		hmac: hmac,
	}, nil
}

// Create will create the provided user and backfill gorm data (id, created at)
// etc..
func (us *UserService) Create(user *User) error {
	pwBytes := []byte(user.Password + userPwPepper)
	hashedBytes, err := bcrypt.GenerateFromPassword(pwBytes, bcrypt.DefaultCost)
	if err != nil {
		return err
	}
	user.PasswordHash = string(hashedBytes)
	user.Password = ""

	if user.Remember == "" {
		token, err := rand.RememberToken()
		if err != nil {
			return err
		}
		user.Remember = token
	}
	user.RememberHash = us.hmac.Hash(user.Remember)

	return us.db.Create(user).Error
}

// Authenticate is used to authenticate a user with the provided email and
// password.
// If the email address provided is invalid, this will return nil, ErrNotFound
// If the password provided is invalid, this will return nil, ErrInvalidPassword
// If the email and password are both valid, thsi will return user, nil
// Otherwise, if any other error is encountered this will return nil, error
func (us *UserService) Authenticate(email, password string) (*User, error) {
	foundUser, err := us.ByEmail(email)
	if err != nil {
		return nil, err
	}

	err = bcrypt.CompareHashAndPassword(
		[]byte(foundUser.PasswordHash), []byte(password+userPwPepper))
	switch err {
	case nil:
		return foundUser, nil
	case bcrypt.ErrMismatchedHashAndPassword:
		return nil, ErrInvalidPassword
	default:
		return nil, err
	}
}

// Update will update a user
func (us *UserService) Update(user *User) error {
	if user.Remember != "" {
		user.RememberHash = us.hmac.Hash(user.Remember)
	}
	return us.db.Save(user).Error
}

// Delete will delete a user with the provided id.
func (us *UserService) Delete(id uint) error {
	// check id is 0, if we pass 0 it will delete everything....
	if id == 0 {
		return ErrInvalidID
	}
	user := User{Model: gorm.Model{ID: id}}
	return us.db.Delete(&user).Error
}

// ByID will look up a user with the provided ID.
// If the user is found, it will return a nil error.
// If no user is found, an ErrNotFound error will be returned.
// Any other error will result in an error being returned with more information
// about what went wrong. This may not be an error generated by the models
// package.
//
// As a general rule, any error other than ErrNotFound should probably result
// in a 500 error.
func (us *UserService) ByID(id uint) (*User, error) {
	var user User
	db := us.db.Where("id = ?", id)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, nil

}

// ByEmail will look up a user with the provided email.
// If the user is found, it will return a nil error.
// If no user is found, an ErrNotFound error will be returned.
// Any other error will result in an error being returned with more information
// about what went wrong. This may not be an error generated by the models
// package.
//
// As a general rule, any error other than ErrNotFound should probably result
// in a 500 error.
func (us *UserService) ByEmail(email string) (*User, error) {
	var user User
	db := us.db.Where("email = ?", email)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, err
}

// ByRemember will look up a user with the provided remember token and return
// that user. This method will handle the hashing for you.
func (us *UserService) ByRemember(token string) (*User, error) {
	var user User
	fmt.Println("here??")
	rememberHash := us.hmac.Hash(token)
	fmt.Println("OR HERE ")
	err := first(us.db.Where("remember_hash = ?", rememberHash), &user)
	if err != nil {
		return nil, err
	}
	fmt.Println("RETURNING USER")
	return &user, nil
}

// DestructiveReset drops the user table and rebuilts it
func (us *UserService) DestructiveReset() error {
	if err := us.db.DropTableIfExists(&User{}).Error; err != nil {
		return err
	}
	return us.AutoMigrate()
}

// AutoMigrate will attempt to automatically migrate the users table
func (us *UserService) AutoMigrate() error {
	if err := us.db.AutoMigrate(&User{}).Error; err != nil {
		return err
	}
	return nil
}

// Close closes the UserService database connection
func (us *UserService) Close() error {
	return us.db.Close()
}

// first will query using the provided gorm.DB. It will return the first item
// found and place it into dst.
//
// If nothing is found it will return ErrNotFound
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}
